// This file is auto-generated by @hey-api/openapi-ts

import type {
  Options as ClientOptions,
  TDataShape,
  Client,
} from "@hey-api/client-fetch";
import type {
  DeletePersonData,
  DeletePersonResponse,
  GetPersonByIdData,
  GetPersonByIdResponse,
  UpdatePersonData,
  UpdatePersonResponse,
  GetAllPersonsData,
  GetAllPersonsResponse,
  CreatePersonData,
  CreatePersonResponse,
} from "./types.gen";
import { client as _heyApiClient } from "./client.gen";

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

export const deletePerson = <ThrowOnError extends boolean = false>(
  options: Options<DeletePersonData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    DeletePersonResponse,
    unknown,
    ThrowOnError
  >({
    url: "/api/persons/{id}",
    ...options,
  });
};

export const getPersonById = <ThrowOnError extends boolean = false>(
  options: Options<GetPersonByIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetPersonByIdResponse,
    unknown,
    ThrowOnError
  >({
    url: "/api/persons/{id}",
    ...options,
  });
};

export const updatePerson = <ThrowOnError extends boolean = false>(
  options: Options<UpdatePersonData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    UpdatePersonResponse,
    unknown,
    ThrowOnError
  >({
    url: "/api/persons/{id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

export const getAllPersons = <ThrowOnError extends boolean = false>(
  options?: Options<GetAllPersonsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetAllPersonsResponse,
    unknown,
    ThrowOnError
  >({
    url: "/api/persons",
    ...options,
  });
};

export const createPerson = <ThrowOnError extends boolean = false>(
  options: Options<CreatePersonData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    CreatePersonResponse,
    unknown,
    ThrowOnError
  >({
    url: "/api/persons",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};
